name: Build Android APK

on:
  push:
    branches: [ main, master, deployment, carl-changes ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master, deployment ]
  workflow_dispatch: # Allows manual trigger

permissions:
  contents: write
  pull-requests: write
  actions: read
  checks: write

jobs:
  build:
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./mobile
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: './mobile/package-lock.json'
        
    - name: Setup Java JDK
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3

    - name: Cache Node modules
      uses: actions/cache@v3
      with:
        path: mobile/node_modules
        key: node-${{ runner.os }}-${{ hashFiles('mobile/package-lock.json') }}
        restore-keys: |
          node-${{ runner.os }}-

    - name: Cache Gradle dependencies
      uses: actions/cache@v3
      with:
        path: |
          mobile/android/.gradle
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: gradle-${{ runner.os }}-${{ hashFiles('mobile/android/**/*.gradle*', 'mobile/android/**/gradle-wrapper.properties') }}
        restore-keys: |
          gradle-${{ runner.os }}-
      
    - name: Install dependencies
      run: npm ci
      
    - name: Setup Expo CLI
      run: npm install -g @expo/cli@latest
      
    - name: Clean and Pre-build Android (generates native code and debug keystore)
      run: |
        rm -rf android
        npx expo prebuild --platform android
      
    - name: Create release keystore (for production builds)
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/deployment'
      run: |
        mkdir -p android/app/release_keystore
        echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 -d > android/app/release_keystore/release.keystore
      env:
        ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
        
    - name: Create gradle.properties for release
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/deployment'
      run: |
        echo "MYAPP_RELEASE_STORE_FILE=release_keystore/release.keystore" >> android/gradle.properties
        echo "MYAPP_RELEASE_KEY_ALIAS=${{ secrets.ANDROID_KEY_ALIAS }}" >> android/gradle.properties
        echo "MYAPP_RELEASE_STORE_PASSWORD=${{ secrets.ANDROID_STORE_PASSWORD }}" >> android/gradle.properties
        echo "MYAPP_RELEASE_KEY_PASSWORD=${{ secrets.ANDROID_KEY_PASSWORD }}" >> android/gradle.properties
      
    - name: Build TailwindCSS
      run: npx tailwindcss -i ./global.css -o ./dist/output.css || echo "TailwindCSS build step completed"
      
    - name: Make gradlew executable
      run: chmod +x android/gradlew
      
    - name: Clean previous builds
      run: |
        cd android
        ./gradlew clean

    - name: Build Android APK (Debug)
      if: github.ref != 'refs/heads/main' && github.ref != 'refs/heads/master' && github.ref != 'refs/heads/deployment'
      run: |
        cd android
        ./gradlew assembleDebug \
          --no-daemon \
          --stacktrace \
          -Dorg.gradle.jvmargs="-Xmx4096m -XX:MaxMetaspaceSize=512m"
        
    - name: Build Android APK (Release)
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/deployment'
      run: |
        cd android
        ./gradlew assembleRelease \
          --no-daemon \
          --stacktrace \
          -Dorg.gradle.jvmargs="-Xmx4096m -XX:MaxMetaspaceSize=512m"

    - name: Verify APK exists and get info
      run: |
        if [ -f "android/app/build/outputs/apk/release/app-release.apk" ]; then
          ls -lh android/app/build/outputs/apk/release/app-release.apk
          APK_SIZE=$(stat -c%s android/app/build/outputs/apk/release/app-release.apk 2>/dev/null || echo "0")
          if [ "$APK_SIZE" -gt 0 ]; then
            echo "‚úÖ Release APK Size: $(($APK_SIZE / 1024 / 1024)) MB"
          fi
        elif [ -f "android/app/build/outputs/apk/debug/app-debug.apk" ]; then
          ls -lh android/app/build/outputs/apk/debug/app-debug.apk
          APK_SIZE=$(stat -c%s android/app/build/outputs/apk/debug/app-debug.apk 2>/dev/null || echo "0")
          if [ "$APK_SIZE" -gt 0 ]; then
            echo "‚úÖ Debug APK Size: $(($APK_SIZE / 1024 / 1024)) MB"
          fi
        fi
        
    - name: Upload Debug APK
      if: github.ref != 'refs/heads/main' && github.ref != 'refs/heads/master' && github.ref != 'refs/heads/deployment'
      uses: actions/upload-artifact@v4
      with:
        name: android-apk-debug
        path: mobile/android/app/build/outputs/apk/debug/app-debug.apk
        retention-days: 30
        
    - name: Upload Release APK
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/deployment'
      uses: actions/upload-artifact@v4
      with:
        name: campus-eats-android-release-${{ github.sha }}
        path: mobile/android/app/build/outputs/apk/release/app-release.apk
        retention-days: 90

    - name: Create GitHub Release (on tag)
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: mobile/android/app/build/outputs/apk/release/app-release.apk
        name: Campus Eats v${{ github.ref_name }}
        body: |
          ## Campus Eats Android Release
          
          **Build Information:**
          - Branch: ${{ github.ref_name }}
          - Commit: ${{ github.sha }}
          - Build Date: ${{ github.event.head_commit.timestamp }}
          
          **Installation:**
          1. Download the APK file
          2. Enable "Install from unknown sources" in Android settings
          3. Install the APK on your device
          
          **Changes:**
          ${{ github.event.head_commit.message }}
        generate_release_notes: true
        draft: false
        prerelease: contains(github.ref_name, 'beta') || contains(github.ref_name, 'alpha')
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Comment on PR with APK info
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const debugPath = 'mobile/android/app/build/outputs/apk/debug/app-debug.apk';
          const releasePath = 'mobile/android/app/build/outputs/apk/release/app-release.apk';
          
          let apkPath = fs.existsSync(releasePath) ? releasePath : debugPath;
          let buildType = fs.existsSync(releasePath) ? 'Release' : 'Debug';
          
          const stats = fs.statSync(apkPath);
          const fileSizeInMB = (stats.size / (1024 * 1024)).toFixed(2);
          
          const body = `## üì± Android APK Built Successfully
          
          **Build Type:** ${buildType}
          **APK Size:** ${fileSizeInMB} MB
          **Build Time:** ${new Date().toISOString()}
          **Commit:** ${context.sha.substring(0, 7)}
          
          You can download the APK from the workflow artifacts once the build completes.`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          });
        
    - name: Build Summary
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/deployment'
      run: |
        echo "üöÄ **Campus Eats Mobile APK Built Successfully!**"
        echo ""
        echo "üì± **APK Details:**"
        echo "- Build: #${{ github.run_number }}"
        echo "- Commit: ${{ github.sha }}"
        echo "- Branch: ${{ github.ref_name }}"
        echo "- APK Path: mobile/android/app/build/outputs/apk/release/app-release.apk"
        echo ""
        echo "üì• **Download:**"
        echo "Go to Actions ‚Üí This workflow run ‚Üí Artifacts ‚Üí campus-eats-android-release"
        echo ""
        echo "üîó **Backend:** campus-eats-backend.onrender.com"
        echo "üêõ **Debug Features:** Error boundaries, enhanced logging, safe navigation"