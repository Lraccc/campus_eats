name: Build Android APK

on:
  push:
    branches: [ main, master, deployment ]
  pull_request:
    branches: [ main, master, deployment ]
  workflow_dispatch: # Allows manual trigger

jobs:
  build:
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./mobile
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: './mobile/package-lock.json'
        
    - name: Setup Java JDK
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      
    - name: Install dependencies
      run: npm ci
      
    - name: Setup Expo CLI
      run: npm install -g @expo/cli@latest
      
    - name: Clean and Pre-build Android (generates native code and debug keystore)
      run: |
        npx expo prebuild --platform android --clear
        rm -rf android/app/build/generated/autolinking
      
    - name: Create release keystore (for production builds)
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/deployment'
      run: |
        mkdir -p android/app/release_keystore
        echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 -d > android/app/release_keystore/release.keystore
      env:
        ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
        
    - name: Create gradle.properties for release
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/deployment'
      run: |
        echo "MYAPP_RELEASE_STORE_FILE=release_keystore/release.keystore" >> android/gradle.properties
        echo "MYAPP_RELEASE_KEY_ALIAS=${{ secrets.ANDROID_KEY_ALIAS }}" >> android/gradle.properties
        echo "MYAPP_RELEASE_STORE_PASSWORD=${{ secrets.ANDROID_STORE_PASSWORD }}" >> android/gradle.properties
        echo "MYAPP_RELEASE_KEY_PASSWORD=${{ secrets.ANDROID_KEY_PASSWORD }}" >> android/gradle.properties
      
    - name: Build TailwindCSS
      run: npx tailwindcss -i ./global.css -o ./dist/output.css || echo "TailwindCSS build step completed"
      
    - name: Make gradlew executable
      run: chmod +x android/gradlew
      
    - name: Build Android APK (Debug)
      if: github.ref != 'refs/heads/main' && github.ref != 'refs/heads/master' && github.ref != 'refs/heads/deployment'
      run: |
        cd android
        ./gradlew assembleDebug
        
    - name: Build Android APK (Release)
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/deployment'
      run: |
        cd android
        ./gradlew assembleRelease
        
    - name: Upload Debug APK
      if: github.ref != 'refs/heads/main' && github.ref != 'refs/heads/master' && github.ref != 'refs/heads/deployment'
      uses: actions/upload-artifact@v4
      with:
        name: android-apk-debug
        path: mobile/android/app/build/outputs/apk/debug/app-debug.apk
        retention-days: 30
        
    - name: Upload Release APK
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/deployment'
      uses: actions/upload-artifact@v4
      with:
        name: android-apk-release
        path: mobile/android/app/build/outputs/apk/release/app-release.apk
        retention-days: 90
        
    - name: Create Release (Production only)
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Campus Eats Mobile v${{ github.run_number }}
        body: |
          ðŸš€ **Campus Eats Mobile App Release**
          
          **Changes in this release:**
          - Built from commit: ${{ github.sha }}
          - Workflow run: ${{ github.run_number }}
          
          **Download the APK:**
          The signed APK will be available in the artifacts section of this workflow run.
          
          **Installations:**
          1. Enable "Install from Unknown Sources" in your Android settings
          2. Download and install the APK file
          
        draft: false
        prerelease: false